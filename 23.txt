1)****************************************************************************



#include<stdio.h>
#include<string.h>
int  main()
{
	int i,q,s,f,final[20],j,trans[20][20],z,qq,sno,state;
	char sym[10],str[30],ch,c;
	printf("\nenter the number of states");
	scanf("%d",&q);
	printf("\nenter the number of symbols");
	scanf("%d",&s);
	printf("\nenter the number of final states");
	scanf("%d",&f);

	printf("\nenter the symbols");
	for(i=0;i<s;i++)
		{
		scanf(" %c",&sym[i]);
		}
	printf("\nenter the final states");
	for(i=0;i<f;i++)
		{
		scanf("%d",&final[i]);
		}
	printf("\nenter the transition table");
	for(i=0;i<q;i++)
	{
		printf("\nenter for state %d \n symbol",i);
		for(j=0;j<s;j++)
		{
			printf(" %c=",sym[j]);
			scanf("%d",&trans[i][j]);
		}
	}

	printf("\nenter a string ");
	scanf("%s",str);
	qq=0;
	for(i=0;i<strlen(str);i++)
	{
		ch=str[i];
		for(j=0;j<s;j++)
		{
			if(ch==sym[j])
			break;
		}
		sno=j;
		//intf("j=%d\t",j);
		state=trans[qq][sno];
		//printf("state %d\t",state);
		qq=state;
	}

	for(i=0;i<f;i++)
	{
		if(state==final[i])
			break;
	}

	if(i==f)
		printf("\ninvalid string");
	else
		printf("\nvalid string");
}

2)****************************************************************************
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX_PROCESSES 50




int Allocation[100][10],Max[100][10],Need[100][10],Available[10],Total[10]={0,0,0};
int no_of_resources,no_of_processes;
static int finish[MAX_PROCESSES];

int finishAll()
{
	int i;
	for(i=0 ; i<no_of_processes ; i++)
		if(finish[i]==0) 
			return 0;
	return 1; 
}

int safe()
{
	int i,j,flag=1;
	int tAllocation[100][10],tNeed[100][10],tAval[10];
	
	
	for(i=0 ; i< no_of_resources ; i++)
		tAval[i]=Available[i];
		
	for(i=0 ; i< no_of_processes ; i++)
	{
		finish[i]=0; 
		
		
		for(j=0; j<no_of_resources; j++)
		{
			tAllocation[i][j]=Allocation[i][j];
			tNeed[i][j]=Need[i][j];
		}
	}
	
	printf("\n\nSafe Sequence : ");
	
	
	while(!finishAll())
	{
		flag=1;
		for(i=0;i<no_of_processes;i++)
		{
			if(finish[i]==1)
				continue;
				
			
			
			for(j=0;j<no_of_resources;j++)
				if(tNeed[i][j]>tAval[j])
				break;
			
				
			if(j==no_of_resources)// all needs are in availability range
			{
				finish[i]=1;   
				
				
				printf(" P%d",i); 
				
				flag=0; 
				
				
				
				for(j=0;j<no_of_resources;j++)
				{
					tAval[j]-=tNeed[i][j];
					tAllocation[i][j]+=tNeed[i][j];
					tNeed[i][j]=0;
				}
				
				
				for(j=0;j<no_of_resources;j++)
                                {
                                        tAval[j]+=tAllocation[i][j];
                                        tAllocation[i][j]=0;
                                }

			}
		}
		
		if(flag==1)return 0;
	}
  	return 1;
}



void request()
{
	int i,j,p,Req[10];
	
	printf("\n\nRequest from which Process ? ");
	scanf("%d",&i);
	
	if(i>no_of_processes || i<0)
	{
		printf("\nError : Invalid Process ID, Process %d does not exist.",i);
		return;
	}
	
	printf("\nEnter Request : ");
	for(j=0;j<no_of_resources;j++)
		scanf("%d",&Req[j]);
		
	for(j=0;j<no_of_resources;j++)
		if(Req[j]>Need[i][j])
			break;
	
	
	if(j<no_of_resources) printf("\nError : Invalid Request");
	
	
	else
	{
		printf("\nRequest is Valid");
		for(j=0;j<no_of_resources;j++)
			if(Req[j] > Available[j])
				break;
		
		
		if(j<no_of_resources)
		printf("\nWAIT : Not enough resources available with system.");
		
		
		else
		{
			printf("\nRequired resources are Available.");
			for(j=0;j<no_of_resources;j++)
			{
				Available[j]-=Req[j];
				Allocation[i][j]+=Req[j];
				Need[i][j]-=Req[j];
			}
			if(safe())
			printf("\nSystem will remain in safe state.\nRequest granted.");
			
			else
			{
				printf("\nSystem does not remain in safe state.");
				printf("\nRequest NOT granted.");
				
				//loading resources back
				for(j=0;j<no_of_resources;j++)
				{
					Available[j]+=Req[j];
        	                        Allocation[i][j]-=Req[j];
	                                Need[i][j]+=Req[j];

				}
			}
		}
	}

	
}

FindNeed()
{
	int i,j,resourceCount;
	char resource='A';

	printf("\nNeed Table\n------------------------");
	printf("\nProcess");
	for(resourceCount=1; resourceCount<= no_of_resources; resourceCount++)
	printf("\t%c ",resource++);
	
	for(i=0;i<no_of_processes;i++)
	{
		printf("\n\nP%d :   \t",i);
		for(j=0;j<no_of_resources;j++)
		{
			Need[i][j]=Max[i][j]-Allocation[i][j];
			printf("%d\t",Need[i][j]);
		}
	}
}

AcceptAllocationTable()
{
	int i,j,resourceCount;
	char resource='A';
	
	printf("\nEnter instances of Resources Allocated to each process : ");
	printf("\n\nAllocation\n-------------");
	printf("\nProcess");
	for(resourceCount=1; resourceCount<= no_of_resources; resourceCount++)
	printf("\t%c ",resource++);
	
	for(i=0;i<no_of_processes;i++)
	{
		printf("\nP%d :   \t",i);
		for(j=0;j<no_of_resources;j++)
		{
			scanf("%d",&Allocation[i][j]);
			Total[j]+=Allocation[i][j];
		}
	}
}

AcceptMaxTable()
{
	int i,j,resourceCount;
	char resource='A';

	printf("\n\nEnter Max Resource Requirements for each process : ");
        printf("\n\nMAX\n-------------");
        printf("\nProcess");
	for(resourceCount=1; resourceCount<= no_of_resources; resourceCount++)
	printf("\t%c ",resource++);
        
        for(i=0;i<no_of_processes;i++)
        {
                printf("\nP%d :   \t",i);
                for(j=0;j<no_of_resources;j++)
                {
                        scanf("%d",&Max[i][j]);
                       
                }
        }

}

main()
{
	int i,j,choice=1,resourceCount;
	char resource='A';

	
	printf("\nHow many types of resources ? ");
	scanf("%d",&no_of_resources);
	
	printf("\nHow many Processes ? ");
	scanf("%d",&no_of_processes);
		
	AcceptAllocationTable();
	
	printf("\nEnter Available resources with system : ");
	
		printf("\n\nAVAILABLE\n-------------");
        	printf("\nResType");
		for(resourceCount=1; resourceCount<= no_of_resources; resourceCount++)
		printf("\t%c ",resource++);
		printf("\n\t  ");
	
	for(j=0;j<no_of_resources;j++)
	{
		scanf("%d",&Available[j]);
		Total[j]+=Available[j];
	}
	
	resource='A'; 
	
	printf("\nTotal system Resources are : ");
	printf("\n\nTOTAL\n-------------\n");
        	printf("\nTotal  ");
		for(resourceCount=1; resourceCount<= no_of_resources; resourceCount++)
		printf("\t%c ",resource++);
		printf("\n");
	for(j=0;j<no_of_resources;j++)
		printf("\t%d",Total[j]);
		
	AcceptMaxTable();
	
	FindNeed();
	
	if(safe())
	{
		printf("\n\nStatus : System is in Safe state");
		do
		{
			request();
			printf("\n\nAny more request ? (yes=1/no=0): ");
			scanf("%d",&choice);
		}while(choice == 1);
	}
	
	else
	
		printf("\nStatus : System is NOT in safe state");
		
}


